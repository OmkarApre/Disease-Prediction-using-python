# -*- coding: utf-8 -*-
"""datascience_Omkar Apre.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nnFqC74bs-9IGSloiALRdVIsAEBTKwYY
"""

# import library
import pandas as pd

# import data
disease = pd.read_csv('https://github.com/ybifoundation/Dataset/raw/main/MultipleDiseasePrediction.csv')

# view data
disease.head()

# info of data
disease.info(verbose=True)

# summary statistics
disease.describe()

# check for missing value
disease.isnull().sum()

# check for categories
disease.prognosis.nunique()

disease.nunique()

# correlation
disease.corr()

# visualize pairplot
import seaborn as sns

#sns.pairplot(disease)

import matplotlib.pyplot as plt

disease['prognosis'].value_counts()

disease['prognosis'].value_counts().plot.bar()

# column names
disease.columns

disease.shape

# define y
y = disease['prognosis']

# define x
x = disease[['itching', 'skin_rash', 'nodal_skin_eruptions', 'continuous_sneezing',
       'shivering', 'chills', 'joint_pain', 'stomach_pain', 'acidity',
       'ulcers_on_tongue','blackheads', 'scurring', 'skin_peeling', 'silver_like_dusting',
       'small_dents_in_nails', 'inflammatory_nails', 'blister',
       'red_sore_around_nose', 'yellow_crust_ooze']]

# split data
from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x,y ,train_size = 0.8, random_state=2217)

# verify shape
x_train.shape, x_test.shape, y_train.shape, y_test.shape

# select model
from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier()

# train model
model.fit(x_train,y_train)

# predict with model
y_pred = model.predict(x_test)

# model evaluation
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# model accuracy
accuracy_score(y_test,y_pred)

# model confusion matrix
confusion_matrix(y_test, y_pred)

# model classification report
print(classification_report(y_test,y_pred))

# future prediction
x_new = x.sample()

# define X_new
x_new

# predict for X_new
model.predict(x_new)

"""# **By Using KNeighbors Model**"""

# select model
from sklearn.neighbors import KNeighborsClassifier
model = KNeighborsClassifier()

# train or fit model
model.fit(x_train,y_train)

# predict with model
y_pred = model.predict(x_test)

# model evaluation
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# model accuracy
accuracy_score(y_test, y_pred)

# model confusion matrix
confusion_matrix(y_test, y_pred)

# model classification report
print(classification_report(y_test, y_pred))

# future prediction
x_new = x.sample()

# define X_new
x_new

# predict for X_new
model.predict(x_new)